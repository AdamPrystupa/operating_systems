GRUPA 4
(b)
Po wywołaniu polecenia:
$ strace ./zad1b

write(1, "Hello world!\n", 13Hello world!)          = 13


można odnaleźć w jego wyniku, że funkcja która została wywołana w celu wyświetlenia napisu to "write".
Funkcja printf() w języku ANSI C w celu wypisania komunikatu w terminalu musi o to "poprosić" system służy do tego własnie
systemcall "write", który został wywołany. Funkcja "write" używa deskryptora "1" który wskazuje na wyjście standardowe. 
Liczba po znaku równości informuje nas o ilości znaków wyświetlanego komunikatu.


(f)
Aby sprawdzić czy plik edytowany w programie pico w czasie jego edycji jest stale otwarty, otworzylismy plik w jednym terminalu
przy pomocy pico. Następnie w nowym terminalu wywołaliśmy:
$ strace -p "PID"
gdzie PID to id procesu pico, który uzyskaliśmy komendą:
$ ps -u
Okazało się, że dopóki plik jest otwarty w programie to w czsaie edycji jest on cały czas otwarty. Wywnisokowaliśmy to na podstawie
ciągle aktywnej funckji read(), której działanie nie jest możliwe przy zamkniętym pliku. W otwartym oknie z programem strace 
możemy na żywo obserwować wszystkie zmiany jakie są wprowadzane w pliku otwartym w pico.

W drugim przypadku testowaliśmy użycie strace w następujący sposób:
$ strace pico testfile.txt
po takim wywołaniu, aktywna była funckja write() i mogliśmy na bieżąco edytować plik widząc wywołania funckji systemowych.

CIEKAWOSTKA: można odpalić jednego strace dla procesu. UWAGA na banicje na panamincie


(g)
Sygnał który zabił program: SIGSEGV (segmentation fault).
Przyczyna: Ten sygnał jest generowany, gdy program próbuje odczytać lub zapisać dane poza obszarem pamięci, 
do którego ma dostęp. W tym przypadku index zwiększa się bez końca, a program próbuje uzyskać dostęp do 
pamięci poza granicami tablicy napis[].

Wyrażenie strace generujące potrzebne informacje:
$ strace -e t=signal ./zad1g
alternatywnie
$ strace -e trace=signal ./zad1g
